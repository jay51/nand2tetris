// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
 
	//  opcode = instruction if type(inst) = a else ALUoutput
	Mux16(a=instruction, b=ALUout, sel=instruction[15], out=opcode);

	// if type(inst) = a or type(inst) = c and 'store in A register' bit is on:
	//	store_in_A_Register(inst)
	Not(in=instruction[15], out=ni);
	Or(a=ni, b=instruction[5], out=storeinA);
	ARegister(in=opcode, load=storeinA, out=A, out[0..14]=addressM);

	// ALU(inM) if type(inst) = c and 'load from memory' bit is on else ALU(A)
	And(a=instruction[15], b=instruction[12], out=laodfromM);
	Mux16(a=A, b=inM, sel=laodfromM, out=AM);
	ALU(x=D, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);

	// if type(inst) = c and 'stor in D registor' bit is on:
	// 	store_in_D_Register(ALUoutput)
	And(a=instruction[15], b=instruction[4], out=storeinD);
	DRegister(in=ALUout, load=storeinD, out=D);

	// write_to_memory(outM) if type(inst) = c and 'write to memory' bit is on
	And(a=instruction[15], b=instruction[3], out=writeM);
	
	// if ng = 1 then ALUout is negtive
	Not(in=ng, out=ispositive);
	// if zr = 1 then ALUout is zero
	Not(in=zr, out=iszero);

	
	And(a=ispositive, b=iszero, out=positiveandzero);
	
	// jump() if ALUout > 0
	And(a=instruction[15], b=instruction[0], out=jgt);	
	And(a=jgt, b=positiveandzero, out=d3);

	// jump() if ALUout = 0
	And(a=instruction[15], b=instruction[1], out=jeq);
	And(a=jeq,b=zr,out=d2);
	
	// jump() if ALUout < 0
	And(a=instruction[15], b=instruction[2], out=jlt);
	And(a=jlt, b=ng, out=d1);

	Or(a=d1, b=d2, out=dout);
	Or(a=d3, b=dout, out=isjump);

	PC(in=A, load=isjump, inc=true, reset=reset, out[0..14]=pc);
}
